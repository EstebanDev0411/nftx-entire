type Global @entity {
  id: ID!
  treasuryAddress: Bytes!
  defaultTreasuryAlloc: BigInt!
  defaultLpAlloc: BigInt!
  lpStakingAddress: Bytes!
  nftxVaultFactory: Bytes!
  feeDistributorAddress: Bytes!
  totalHoldings: BigInt! # counter
}

type Vault @entity {
  id: ID! # address
  vaultId: BigInt!
  token: Token!
  asset: Asset!
  manager: Manager!
  is1155: Boolean!
  allowAllItems: Boolean!
  isFinalized: Boolean! # if manager == 0x0
  holdings: [BigInt!] # NFT IDs, note 1155s can have multiple of same ID
  mints: [Mint!]!
  redeems: [Redeem!]!
  stakingPools: [Pool!]!
  fees: Fees!
  features: Features!
  feeReceivers: [FeeReceiver!]!
  feeReceipts: [FeeReceipt!]!
  totalFees: BigInt! # counter
  treasuryAlloc: BigInt!
  allocTotal: BigInt!
}

type Fees @entity {
  id: ID! # address
  mintFee: BigInt!
  redeemFee: BigInt!
  directRedeemFee: BigInt!
  swapFee: BigInt!
}

type Features @entity {
  id: ID! # address
  enableMint: Boolean!
  enableRedeem: Boolean!
  enableDirectRedeem: Boolean!
  enableSwap: Boolean!
}

type Asset @entity {
  id: ID! # address
  name: String!
  symbol: String!
  vaults: [Vault!]!
}

type Manager @entity {
  id: ID! # address
  vaults: [Vault!]!
}

type FeeReceiver @entity {
  id: ID! # address
  vault: Vault!
  allocPoint: BigInt!
}

type FeeReceipt @entity {
  id: ID! # tx hash
  token: Token!
  amount: BigInt!
}

type Pool @entity {
  id: ID! # address
  vault: Vault!
  rewardToken: Token!
  stakingToken: Token!
  dividendToken: Token!
  totalRewards: BigInt!
}

type Token @entity {
  id: ID! # address
  name: String!
  symbol: String!
  totalSupply: BigInt!
}

type Mint @entity {
  id: ID! # tx
  date: Int!
  user: User!
  vault: Vault!
  nftIds: [BigInt!]
}

enum RedeemType {
  random
  direct
}

type Redeem @entity {
  id: ID! # tx
  date: Int!
  user: User!
  type: RedeemType! # random, direct
  vault: Vault!
  nftIds: [BigInt!]
}

type User @entity {
  id: ID! # address
  mints: [Mint!]!
  redeems: [Redeem!]!
}

type StakedLpUser @entity {
  id: ID! # address
  pools: [Pool!]!
  userRewards: [Rewards!]!
}

type Rewards @entity {
  id: ID! # address
  date: Int!
  pool: Pool!
  reward: Int!
}
