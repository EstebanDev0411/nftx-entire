type Global @entity {
  id: ID!
  totalHoldings: BigInt! # counter
  defaultTreasuryAlloc: BigInt!
  defaultLpAlloc: BigInt!
  treasuryAddress: Bytes!
  lpStakingAddress: Bytes!
  nftxVaultFactory: Bytes!
  feeDistributorAddress: Bytes!
}

type Vault @entity {
  id: ID! # address
  vaultId: BigInt!
  token: Token!
  asset: Asset!
  manager: Manager!
  is1155: Boolean!
  allowAllItems: Boolean!
  isFinalized: Boolean! # if manager == 0x0
  holdings: [BigInt!]! # NFT IDs, note 1155s can have multiple of same ID
  mints: [Mint!]! @derivedFrom(field: "vault")
  redeems: [Redeem!]! @derivedFrom(field: "vault")
  stakingPools: [Pool!]! @derivedFrom(field: "vault")
  fees: Fee!
  features: Feature!
  feeReceivers: [FeeReceiver!]! @derivedFrom(field: "vault")
  feeReceipts: [FeeReceipt!]! @derivedFrom(field: "vault")
  totalFees: BigInt! # counter
  treasuryAlloc: BigInt!
  allocTotal: BigInt!
}

type Fee @entity {
  id: ID! # address
  vault: Vault! @derivedFrom(field: "fees")
  mintFee: BigInt!
  randomRedeemFee: BigInt!
  directRedeemFee: BigInt!
  swapFee: BigInt!
}

type Feature @entity {
  id: ID! # address
  vault: Vault! @derivedFrom(field: "features")
  enableMint: Boolean!
  enableRandomRedeem: Boolean!
  enableDirectRedeem: Boolean!
  enableSwap: Boolean!
}

type Asset @entity {
  id: ID! # address
  name: String!
  symbol: String!
  vaults: [Vault!]! @derivedFrom(field: "asset")
}

type Manager @entity {
  id: ID! # address
  vaults: [Vault!]! @derivedFrom(field: "manager")
}

type FeeReceiver @entity {
  id: ID! # address
  vault: Vault!
  allocPoint: BigInt!
}

type FeeReceipt @entity {
  id: ID! # tx hash
  vault: Vault!
  token: Token!
  amount: BigInt!
  date: BigInt!
}

type Pool @entity {
  id: ID! # address
  vault: Vault!
  rewardToken: Token!
  stakingToken: Token!
  dividendToken: Token!
  vaultTokensStaked: BigInt!
  totalRewards: BigInt!
}

type Token @entity {
  id: ID! # address
  name: String!
  symbol: String!
  totalSupply: BigInt!
}

type Mint @entity {
  id: ID! # tx
  date: BigInt!
  user: User!
  vault: Vault!
  nftIds: [BigInt!]
  amounts: [BigInt!]
  feeReceipt: FeeReceipt!
}

type Redeem @entity {
  id: ID! # tx
  date: BigInt!
  user: User!
  vault: Vault!
  nftIds: [BigInt!]!
  specificIds: [BigInt!]!
  directCount: BigInt!
  randomCount: BigInt!
  feeReceipt: FeeReceipt!
}

type User @entity {
  id: ID! # address
  mints: [Mint!]! @derivedFrom(field: "user")
  redeems: [Redeem!]! @derivedFrom(field: "user")
}

type StakedLpUser @entity {
  id: ID! # address
  pools: [Pool!]!
  activePools: [Pool!]!
  userRewards: [Reward!]! @derivedFrom(field: "user")
  deposits: [Deposit!]! @derivedFrom(field: "user")
}

type Reward @entity {
  id: ID! # tx
  date: BigInt!
  pool: Pool!
  user: StakedLpUser!
  reward: BigInt!
}

type Deposit @entity {
  id: ID! # tx
  date: BigInt!
  pool: Pool!
  user: StakedLpUser!
  deposit: BigInt!
}
